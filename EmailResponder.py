#Python script to monitor gmail inbox, then respond to any senders with an automated message
#Can be modified to perform actions based on the contents of the email
#This will only work for email to email communications, cellular to email communications will return header information instead of message content

import imaplib, email, os, time, smtplib
from email.mime.text import MIMEText

#In here put your full gmail account
user = "imaworkingbot@gmail.com"

#Here put the app password generated by google
password = "1234 1234 1234 1324"
imap_url = "imap.gmail.com"

#Sender
subject = ""
recipients = [""]

Content = 0
def send_email(subject, body, user, recipients, password):
    msg = MIMEText(body)
    msg['Subject'] = subject
    msg['From'] = user
    msg['To'] = ', '.join(recipients)
    with smtplib.SMTP_SSL('smtp.gmail.com', 465) as smtp_server:
       smtp_server.login(user, password)
       smtp_server.sendmail(user, recipients, msg.as_string())
    print("Message sent!")


while True:
    connection = imaplib.IMAP4_SSL(imap_url)
    connection.login(user, password)
    connection.select()
    result, data = connection.uid('search', None, "(UNSEEN)")
    if result == 'OK':
        #print(len(data[0].split()))
        for num in data[0].split():
            result, data = connection.uid('fetch', num, '(RFC822)')
            if result == 'OK':
                email_message = email.message_from_bytes(data[0][1])
                print('From:' + email_message['From'])
        
                x = str(email_message.get_payload()).split("\n")

                #Use this instead for cellular to email communications
                #x = str(email_message.get_payload()[0]).split("\n")
                
              
                #Used to determine which index is email content
                Content = 0
                for line in x:
                    if line == "":
                        break
                    else:
                        Content += 1
                #To use cellular communications ensure you are using x[Content+1] instead of x[Content-1]
                print(x[Content-1])
                recipients = [email_message['From']]
                send_email(subject, f"Message of '{x[Content-1]}' received", user, recipients, password)
                
    connection.close()
    connection.logout() 
    time.sleep(1)
